using LBoL.Base;
using LBoL.Base.Extensions;
using LBoL.ConfigData;
using LBoL.Core;
using LBoL.Core.Battle;
using LBoL.Core.Battle.BattleActions;
using LBoL.Core.Cards;
using LBoL.Core.Units;
using LBoLEntitySideloader;
using LBoLEntitySideloader.Attributes;
using LBoLMod.StatusEffects.Keywords;
using System.Collections.Generic;
using System.Linq;

namespace LBoLMod.Cards
{
    public sealed class HaniwaExploiterDef : ModCardTemplate
    {
        public override IdContainer GetId()
        {
            return nameof(HaniwaExploiter);
        }

        public override CardConfig MakeConfig()
        {
            var cardConfig = base.MakeConfig();
            cardConfig.IsPooled = false;
            cardConfig.Rarity = Rarity.Uncommon;
            cardConfig.Type = CardType.Attack;
            cardConfig.TargetType = TargetType.SingleEnemy;
            cardConfig.Colors = new List<ManaColor>() { ManaColor.White };
            cardConfig.Damage = 10;
            cardConfig.Value1 = 10;
            cardConfig.Value2 = 8;
            cardConfig.Keywords = Keyword.Retain | Keyword.Replenish;
            cardConfig.UpgradedKeywords = Keyword.Retain | Keyword.Replenish;
            cardConfig.RelativeEffects = new List<string>() { nameof(Frontline) };
            cardConfig.UpgradedRelativeEffects = new List<string>() { nameof(Frontline) };
            return cardConfig;
        }
    }

    [EntityLogic(typeof(HaniwaExploiterDef))]
    public sealed class HaniwaExploiter : ModFrontlineCard
    {
        public override bool IsArcherType => true;
        protected override int PassiveConsumedRemainingValue => 4;
        protected override int OnPlayConsumedRemainingValue => 6;
        public DamageInfo PassiveDmg => DamageInfo.Reaction(Value2);
        public override int AdditionalValue2 => base.UpgradeCounter.GetValueOrDefault();
        public DamageInfo OnPlayDmg => Damage;
        public override int AdditionalDamage => base.UpgradeCounter.GetValueOrDefault();
        public int DebuffDmg => 3 + base.UpgradeCounter.GetValueOrDefault() / 5;
        public int CalcDebuffDmg(Unit unit) => unit.StatusEffects.Where(s => s.Type == StatusEffectType.Negative).Count() * DebuffDmg;
        protected override void OnEnterBattle(BattleController battle)
        {
            base.OnEnterBattle(battle);
            base.ReactBattleEvent(base.Battle.Player.TurnEnded, this.OnTurnEnded);
            base.HandleBattleEvent(base.Battle.Player.DamageDealing, this.OnDamageDealing);
        }

        private void OnDamageDealing(DamageDealingEventArgs args)
        {
            if (args.Cause != ActionCause.OnlyCalculate)
                return;
            if (args.ActionSource != this)
                return;
            if (args.Targets == null)
                return;
            DamageInfo damageInfo = args.DamageInfo;
            if (damageInfo.DamageType != DamageType.Attack)
                return;

            var target = args.Targets.FirstOrDefault();
            args.DamageInfo = damageInfo.IncreaseBy(CalcDebuffDmg(target));
            args.AddModifier(this);
        }

        private IEnumerable<BattleAction> OnTurnEnded(UnitEventArgs args)
        {
            if (base.Battle.BattleShouldEnd)
                yield break;
            if (base.Zone != CardZone.Hand)
                yield break;
            if (CheckPassiveLoyaltyNotFulfiled())
                yield break;
            var enemiesWithDebuffs = base.Battle.AllAliveEnemies.Where(e => e.StatusEffects.Any(s => s.Type == StatusEffectType.Negative));
            if (!enemiesWithDebuffs.Any())
                yield break;

            base.NotifyActivating();
            yield return ConsumePassiveLoyalty();
            yield return new DamageAction(base.Battle.Player, enemiesWithDebuffs, PassiveDmg);
        }

        protected override IEnumerable<BattleAction> Actions(UnitSelector selector, ManaGroup consumingMana, Interaction precondition)
        {
            int debuffDmg = CalcDebuffDmg(selector.GetEnemy(base.Battle));
            yield return AttackAction(selector, OnPlayDmg.IncreaseBy(debuffDmg));
        }
    }
}
