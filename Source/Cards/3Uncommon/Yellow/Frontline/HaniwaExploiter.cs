using LBoL.Base;
using LBoL.Base.Extensions;
using LBoL.ConfigData;
using LBoL.Core;
using LBoL.Core.Battle;
using LBoL.Core.Battle.BattleActions;
using LBoL.Core.Cards;
using LBoL.Core.Units;
using LBoLEntitySideloader;
using LBoLEntitySideloader.Attributes;
using LBoLMod.StatusEffects.Keywords;
using System.Collections.Generic;
using System.Linq;

namespace LBoLMod.Cards
{
    public sealed class HaniwaExploiterDef : ModCardTemplate
    {
        public override IdContainer GetId()
        {
            return nameof(HaniwaExploiter);
        }

        public override CardConfig MakeConfig()
        {
            var cardConfig = base.MakeConfig();
            cardConfig.IsPooled = false;
            cardConfig.Rarity = Rarity.Uncommon;
            cardConfig.Type = CardType.Attack;
            cardConfig.TargetType = TargetType.SingleEnemy;
            cardConfig.Colors = new List<ManaColor>() { ManaColor.White };
            cardConfig.Damage = 9;
            cardConfig.Value1 = 2;
            cardConfig.UpgradedValue1 = 3;
            cardConfig.Value2 = 15;
            cardConfig.Keywords = Keyword.Exile | Keyword.Retain | Keyword.Replenish;
            cardConfig.UpgradedKeywords = Keyword.Exile | Keyword.Retain | Keyword.Replenish;
            cardConfig.RelativeEffects = new List<string>() { nameof(Frontline) };
            cardConfig.UpgradedRelativeEffects = new List<string>() { nameof(Frontline) };
            return cardConfig;
        }
    }

    [EntityLogic(typeof(HaniwaExploiterDef))]
    public sealed class HaniwaExploiter : ModFrontlineCard
    {
        public override int AdditionalDamage => base.UpgradeCounter.GetValueOrDefault();
        public DamageInfo OnPlayDmg => DamageInfo.Attack(Value2);
        public override int AdditionalValue2 => base.UpgradeCounter.GetValueOrDefault() * 2;
        public int DebuffDmg => 5;
        protected override void OnEnterBattle(BattleController battle)
        {
            base.OnEnterBattle(battle);
            foreach (EnemyUnit enemy in base.Battle.AllAliveEnemies)
            {
                base.ReactBattleEvent(enemy.StatusEffectAdded, this.OnEnemyStatusAdded);
            }
            base.HandleBattleEvent(base.Battle.EnemySpawned, this.OnEnemySpawned);
        }

        private void OnEnemySpawned(UnitEventArgs args)
        {
            base.ReactBattleEvent(args.Unit.StatusEffectAdded, this.OnEnemyStatusAdded);
        }

        private IEnumerable<BattleAction> OnEnemyStatusAdded(StatusEffectApplyEventArgs args)
        {
            if (base.Battle.BattleShouldEnd)
                yield break;
            if (base.Zone != CardZone.Hand)
                yield break;
            if (args.Effect.Type != StatusEffectType.Negative)
                yield break;
            if (RemainingValue <= 0)
                yield break;

            base.NotifyActivating();
            RemainingValue -= 1;
            yield return new DamageAction(base.Battle.Player, args.Unit, Damage);
        }

        protected override IEnumerable<BattleAction> Actions(UnitSelector selector, ManaGroup consumingMana, Interaction precondition)
        {
            base.DeltaValue2 = DebuffDmg * selector.GetEnemy(base.Battle).StatusEffects.Where(s => s.Type == StatusEffectType.Negative).Count();
            yield return AttackAction(selector, OnPlayDmg);
            base.DeltaValue2 = 0;
            IncreaseFrontlineCosts();
        }
    }
}
